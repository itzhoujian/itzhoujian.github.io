<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>ZhouJian`s Notes</title>
  <subtitle>胡编乱写</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://zhoujian.lol/"/>
  <updated>2016-12-24T12:11:07.275Z</updated>
  <id>http://zhoujian.lol/</id>
  
  <author>
    <name>zhoujian</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>shell脚本定时采集日志数据</title>
    <link href="http://zhoujian.lol/2016/12/24/shell%E8%84%9A%E6%9C%AC%E5%AE%9A%E6%97%B6%E9%87%87%E9%9B%86%E6%97%A5%E5%BF%97%E6%95%B0%E6%8D%AE/"/>
    <id>http://zhoujian.lol/2016/12/24/shell脚本定时采集日志数据/</id>
    <published>2016-12-24T14:31:53.000Z</published>
    <updated>2016-12-24T12:11:07.275Z</updated>
    
    <content type="html"><![CDATA[<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div></pre></td><td class="code"><pre><div class="line">#!/bin/bash</div><div class="line">#set java env</div><div class="line">export JAVA_HOME=/usr/lib/java/jdk1.7.0_79/</div><div class="line">export JRE_HOME=$&#123;JAVA_HOME&#125;/jre</div><div class="line">export CLASSPATH=.:$&#123;JAVA_HOME&#125;/lib:$&#123;JRE_HOME&#125;/lib</div><div class="line">export PATH=$&#123;JAVA_HOME&#125;/bin:$PATH</div><div class="line"></div><div class="line">#set hadoop env</div><div class="line">export HADOOP_HOME=/app/hadoop/hadoop-2.2.0</div><div class="line">export PATH=$&#123;HADOOP_HOME&#125;/bin:$&#123;HADOOP_HOME&#125;/sbin:$PATH</div><div class="line"></div><div class="line">#日志文件存放目录</div><div class="line">log_src_dir=/home/hadoop/logs/log/</div><div class="line"></div><div class="line">#待上传文件存放目录</div><div class="line">log_toupload_dir=/home/hadoop/logs/toupload/</div><div class="line"></div><div class="line">#hdfs目录名称关联当前系统时间</div><div class="line">datedir=`date +%Y%m%d`</div><div class="line"></div><div class="line">#日志文件上传到hdfs的根目录,（每天生产文件夹需要修改）</div><div class="line">hdfs_root_dir=/data/clickLog/`date +%Y%m%d`</div><div class="line"></div><div class="line">#打印环境变量信息</div><div class="line">echo &quot;envs:hadoop_home:$HADOOP_HOME&quot;</div><div class="line"></div><div class="line">#读取日志文件的目录，判断是否需要上传文件</div><div class="line">echo &quot;log_src_dir:&quot;$log_src_dir</div><div class="line">ls $log_src_dir | while read fileName</div><div class="line">do</div><div class="line">	if [[ &quot;$fileName&quot; == access.log.* ]];then</div><div class="line">		date=`date +%Y_%m_%d_%H_%M_%S`</div><div class="line">	#将文件移动到待上传目录并重命名</div><div class="line">	echo &quot;moving $log_src_dir$fileName to $log_toupload_dir&quot;xxxxx_click_log_$fileName&quot;$date&quot;</div><div class="line">	mv $log_src_dir$fileName $log_toupload_dir&quot;xxxxx_click_log_$fileName&quot;$date</div><div class="line">	#将待上传文件path写入一个列表文件willDong.$date</div><div class="line">	echo $log_toupload_dir&quot;xxxxx_click_log_$fileName&quot;$date &gt;&gt; $log_toupload_dir&quot;willDoing.&quot;$date</div><div class="line">	fi</div><div class="line">done</div><div class="line">#找到列表文件的willDoing</div><div class="line">ls $log_toupload_dir | grep will | grep -v &quot;_COPY_&quot; | grep -v &quot;_DONE_&quot; | while read line</div><div class="line">do</div><div class="line">	#打印信息</div><div class="line">	echo &quot;toupload is in file :&quot;$line</div><div class="line">	#将待上传文件列表willDoing改名为willDoing_COPY_</div><div class="line">	mv $log_toupload_dir$line $log_toupload_dir$line&quot;_COPY_&quot;</div><div class="line">	#读列表文件willDling_COPY_的内容 一个一个文件上传</div><div class="line">	cat $log_toupload_dir$line&quot;_COPY_&quot; | while read line</div><div class="line">	do</div><div class="line">		#打印信息</div><div class="line">		echo &quot;puting ...... $line to hdfs path... $hdfs_root_dir&quot;</div><div class="line">		hadoop fs -put $line $hdfs_root_dir</div><div class="line">	done</div><div class="line">	mv $log_toupload_dir$line&quot;_COPY_&quot; $log_toupload_dir$line&quot;_DONE_&quot;</div><div class="line">done</div></pre></td></tr></table></figure>
<p>最后crontab 做定时任务</p>
]]></content>
    
    <summary type="html">
    
      原创
    
    </summary>
    
      <category term="技术" scheme="http://zhoujian.lol/categories/%E6%8A%80%E6%9C%AF/"/>
    
      <category term="大数据" scheme="http://zhoujian.lol/categories/%E6%8A%80%E6%9C%AF/%E5%A4%A7%E6%95%B0%E6%8D%AE/"/>
    
    
      <category term="shell脚本" scheme="http://zhoujian.lol/tags/shell%E8%84%9A%E6%9C%AC/"/>
    
  </entry>
  
  <entry>
    <title>HDFS原理</title>
    <link href="http://zhoujian.lol/2016/12/24/HDFS%E5%8E%9F%E7%90%86/"/>
    <id>http://zhoujian.lol/2016/12/24/HDFS原理/</id>
    <published>2016-12-24T13:09:07.000Z</published>
    <updated>2016-12-24T13:10:05.206Z</updated>
    
    <content type="html"><![CDATA[<p>(注：HDFS适合用来做数据分析，并不适合用来做网盘应用，因为，不便修改，延迟大，网络开销大，成本太高)</p>
<h2 id="HDFS的工作机制"><a href="#HDFS的工作机制" class="headerlink" title="HDFS的工作机制"></a>HDFS的工作机制</h2><h3 id="hdfs写数据"><a href="#hdfs写数据" class="headerlink" title="hdfs写数据"></a>hdfs写数据</h3><p>1.和namenode通信请求上传文件，namenode验证目标是否存在，文件是否存在，是否可以上传。<br>2.如果可以上传，客户端请求的第一个block快该上传到哪些datanode，需要从请求返回的namenode列表中获取。<br>3.假如返回A、B、C、3个namenode，客户端会在一台上传数据，A收到请求会继续调用B，然后B调用C，将真个pipeline建立完成，逐级返回客户端(本质上是一个RPC调用，建立pipeline,以packet为单位)<br>4.当一个block传输完成之后，client再次请求namenode上传第二个block的服务器。</p>
<h3 id="hdfs读数据"><a href="#hdfs读数据" class="headerlink" title="hdfs读数据"></a>hdfs读数据</h3><p>1.和namenode进行通信查询元数据，找到block对应的datanode信息。<br>2.挑选一台datanode服务器建立连接(就近原则，然后随机)，建立socket流<br>3.datanode开始发送数据(从磁盘读出数据放入流中，以packet(64K)为单位校验)<br>4.客户端以packet为单位接收，先存入本地，在写入目标文件。</p>
<h2 id="NAMENODE工作机制"><a href="#NAMENODE工作机制" class="headerlink" title="NAMENODE工作机制"></a>NAMENODE工作机制</h2><h3 id="元数据管理"><a href="#元数据管理" class="headerlink" title="元数据管理"></a>元数据管理</h3><p>1.namenode对数据的管理采用了3种形式：<br>2.内存元数据管理(meta.data)<br>3.磁盘镜像fsimage文件管理<br>4.数据操作日志文件edits管理</p>
<h3 id="元数据存储"><a href="#元数据存储" class="headerlink" title="元数据存储"></a>元数据存储</h3><p>当客户端对hdfs系统上的文件进行新增或修改时，操作记录首先被记录edits文件中，当客户端操作成功后，相应的元数据会更新到内存meta.data。<br>当checkpoint被触发后，secondNameNode后到namenode工作目录中抓取fsimage文件和edits文件，并进行merge，重新替换之前的fsimage文件。</p>
<p>namenode和secondary namenode的工作目录存储结构完全相同，所以，当namenode故障退出需要重新恢复时，可以从secondary namenode的工作目录中将fsimage拷贝到namenode的工作目录，以恢复namenode的元数据。</p>
<h2 id="DATANODE的工作机制"><a href="#DATANODE的工作机制" class="headerlink" title="DATANODE的工作机制"></a>DATANODE的工作机制</h2><p>存储管理用户的文件块数据<br>定期向namenode汇报自身所持有的block信息（通过心跳信息上报）<br>（这点很重要，因为，当集群中发生某些block副本失效时，集群如何恢复block初始副本数量的问题）</p>
<p>Datanode掉线判断时限参数，HDFS默认的超时时长为10分钟+30秒。如果定义超时时间为timeout，则超时时长的计算公式为：<br>    timeout  = 2 <em> heartbeat.recheck.interval(单位毫秒) + 10 </em> dfs.heartbeat.interval(单位秒)。</p>
]]></content>
    
    <summary type="html">
    
      技术,大数据
    
    </summary>
    
    
      <category term="HDFS" scheme="http://zhoujian.lol/tags/HDFS/"/>
    
  </entry>
  
  <entry>
    <title>FTP接口数据采集</title>
    <link href="http://zhoujian.lol/2016/12/24/FTP%E6%8E%A5%E5%8F%A3%E6%95%B0%E6%8D%AE%E9%87%87%E9%9B%86/"/>
    <id>http://zhoujian.lol/2016/12/24/FTP接口数据采集/</id>
    <published>2016-12-24T12:08:48.000Z</published>
    <updated>2016-12-24T12:13:34.921Z</updated>
    
    <content type="html"><![CDATA[<h2 id="需求"><a href="#需求" class="headerlink" title="需求"></a>需求</h2><p>从外部购买数据，数据提供方会实时将数据推送到6台FTP服务器上，我方部署6台接口采集机来对接采集数据，并上传到HDFS中</p>
<p>提供商在FTP上生成数据的规则是以小时为单位建立文件夹(2016-03-11-10)，每分钟生成一个文件（00.dat,01.data,02.dat,……..）</p>
<p>提供方不提供数据备份，推送到FTP服务器的数据如果丢失，不再重新提供，且FTP服务器磁盘空间有限，最多存储最近10小时内的数据</p>
<p>由于每一个文件比较小，只有150M左右，因此，我方在上传到HDFS过程中，需要将15分钟时段的数据合并成一个文件上传到HDFS</p>
<p>为了区分数据丢失的责任，我方在下载数据时最好进行校验</p>
<p>未完待续 详情资料正在整理中……</p>
]]></content>
    
    <summary type="html">
    
      原创
    
    </summary>
    
      <category term="技术" scheme="http://zhoujian.lol/categories/%E6%8A%80%E6%9C%AF/"/>
    
      <category term="大数据" scheme="http://zhoujian.lol/categories/%E6%8A%80%E6%9C%AF/%E5%A4%A7%E6%95%B0%E6%8D%AE/"/>
    
    
      <category term="数据采集" scheme="http://zhoujian.lol/tags/%E6%95%B0%E6%8D%AE%E9%87%87%E9%9B%86/"/>
    
  </entry>
  
  <entry>
    <title>网站或APP点击流日志数据挖掘系统</title>
    <link href="http://zhoujian.lol/2016/12/23/%E7%BD%91%E7%AB%99%E6%88%96APP%E7%82%B9%E5%87%BB%E6%B5%81%E6%97%A5%E5%BF%97%E6%95%B0%E6%8D%AE%E6%8C%96%E6%8E%98%E7%B3%BB%E7%BB%9F/"/>
    <id>http://zhoujian.lol/2016/12/23/网站或APP点击流日志数据挖掘系统/</id>
    <published>2016-12-23T15:26:22.000Z</published>
    <updated>2016-12-23T15:30:38.726Z</updated>
    
    <content type="html"><![CDATA[<h2 id="需求描述"><a href="#需求描述" class="headerlink" title="需求描述"></a>需求描述</h2><p>“Web点击流日志”包含着网站运营很重要的信息，通过日志分析，我们可以知道网站的访问量，哪个网页访问人数最多，哪个网页最有价值，广告转化率、访客的来源信息，访客的终端信息等。</p>
<h2 id="数据来源"><a href="#数据来源" class="headerlink" title="数据来源"></a>数据来源</h2><p>数据主要是用户的点击行为记录，获取方式通常是在页面内预埋js代码，为页面想要监听的标签绑定事件，只要用户点击或移动到标签就会触发ajax请求到后台servlet，用log4j记录下日志信息，在后台服务器nginx、tomcat不断产生增长日志文件。</p>
<h2 id="数据量分析"><a href="#数据量分析" class="headerlink" title="数据量分析"></a>数据量分析</h2><p>对于一般的中型网站(10W的PV以上)，每天会产生1G以上的web日志文件。<br>对于大型或超大型网站,可能每小时就会产生10G的数据量。<br>具体来说，比如某电子商务网站，在线团购业务。每日PV数100w，独立IP数5w。用户通常在工作日上午10:00-12:00和下午15:00-18:00访问量最大。日间主要是通过PC端浏览器访问，休息日及夜间通过移动设备访问较多。网站搜索浏量占整个网站的80%，PC用户不足1%的用户会消费，移动用户有5%会消费。</p>
<p>对于日志的这种规模的数据，用HADOOP进行日志分析，是最适合不过的了。</p>
<h2 id="流程图解析"><a href="#流程图解析" class="headerlink" title="流程图解析"></a>流程图解析</h2><p><img src="http://zhoujian.lol/images/数据流程图.png" alt="images"></p>
<p>数据采集：定制开发采集程序，或使用开源框架FLUME<br>数据预处理：定制开发mapreduce程序运行于hadoop集群<br>数据仓库技术：基于hadoop之上的Hive<br>数据导出：基于hadoop的sqoop数据导入导出工具<br>数据可视化：定制开发web程序或使用kettle(etl工具)等产品<br>整个过程的流程调度：hadoop生态圈中的oozie工具或其他类似开源产品</p>
<h2 id="项目技术架构图"><a href="#项目技术架构图" class="headerlink" title="项目技术架构图"></a>项目技术架构图</h2><p><img src="http://zhoujian.lol/images/技术架构图.png" alt="image"></p>
<h2 id="推荐系统架构"><a href="#推荐系统架构" class="headerlink" title="推荐系统架构"></a>推荐系统架构</h2><p><img src="http://zhoujian.lol/images/推荐系统.jpg" alt="image"></p>
]]></content>
    
    <summary type="html">
    
      原创
    
    </summary>
    
      <category term="技术" scheme="http://zhoujian.lol/categories/%E6%8A%80%E6%9C%AF/"/>
    
      <category term="大数据" scheme="http://zhoujian.lol/categories/%E6%8A%80%E6%9C%AF/%E5%A4%A7%E6%95%B0%E6%8D%AE/"/>
    
    
      <category term="推荐系统" scheme="http://zhoujian.lol/tags/%E6%8E%A8%E8%8D%90%E7%B3%BB%E7%BB%9F/"/>
    
      <category term="数据分析" scheme="http://zhoujian.lol/tags/%E6%95%B0%E6%8D%AE%E5%88%86%E6%9E%90/"/>
    
  </entry>
  
  <entry>
    <title>zookeeper</title>
    <link href="http://zhoujian.lol/2016/12/22/zookeeper/"/>
    <id>http://zhoujian.lol/2016/12/22/zookeeper/</id>
    <published>2016-12-22T14:31:53.000Z</published>
    <updated>2016-12-22T15:35:59.420Z</updated>
    
    <content type="html"><![CDATA[<h2 id="是什么"><a href="#是什么" class="headerlink" title="是什么"></a>是什么</h2><p>分布式协调服务框架，那么怎么理解分布式，其实就是一个完整的应用或功能或业务被分成若干个独立的部分或子业务，部署在不同的服务器上，所有部分去共同完成一个功能。<br>优点：负载由单个节点转移到多个，提高效率缓解压力<br>      避免了单个节点失效，整个系统崩溃的危险<br>      提高利用率，子业务可以被反复使用<br>而协调服务说白了就是为其它应用程序服务的。<br>zookeeper本身也是分布式的(半数以上节点存活就能提供服务)</p>
<h2 id="功能"><a href="#功能" class="headerlink" title="功能"></a>功能</h2><p>总的来说有2个<br>管理用户提交的数据(存储或读取)<br>为数据提供监听服务</p>
<h2 id="集群角色分配原理-选举"><a href="#集群角色分配原理-选举" class="headerlink" title="集群角色分配原理(选举)"></a>集群角色分配原理(选举)</h2><p>以3台zookeepr为例，当启动第一个服务启动时发现配置文件中由3个server就会通过paxos算法进行投票，发现集群中没有leader，并且只有自己一个节点，就会投票给自己。当第二个服务启动后也发现集群中没有leader但是有一个folwer就会投给自己和第一个服务各一票，第一个服务也发现新节点也会重新投票，投给自己和对方一票，这时票数时2:2由于节点数已经过半所以paxos根据2个节点的myid号大小，将大的变为leader，其他节点在启动就会以这个leader为主，leader在维护各个folwer中的数据(这里由些偏差，待更新……)</p>
<h2 id="java客户端操作及监听器原理"><a href="#java客户端操作及监听器原理" class="headerlink" title="java客户端操作及监听器原理"></a>java客户端操作及监听器原理</h2><hr>
<p>public class SimpleZkClient {<br>    private static final String CONNECTSTRING = “192.168.25.61:2181,192.168.25.62:2181,192.168.25.63:2181”;<br>    private static final int SESSIONTIMEOUT = 200000;<br>    ZooKeeper zkClient = null;</p>
<pre><code>@Before
public void init() throws IOException {

    // 初始化 Watcher监听节点的变化 此监听可以被后面的使用
    zkClient = new ZooKeeper(CONNECTSTRING, SESSIONTIMEOUT, new Watcher() {

        @Override
        public void process(WatchedEvent event) {
            System.out.println(event.getType() + &quot;---------- &quot;
                    + event.getPath());
            try {
                // 因为只会监听一次，实际业务场景要时时监听
                zkClient.getChildren(&quot;/&quot;, true);
            } catch (Exception e) {
                e.printStackTrace();
            }
        }
    });
}

// 创建节点到zk中
@Test
public void testCreate() throws KeeperException, InterruptedException {

    // 1.znode路径及名称 2。节点的内容 3。安全策略 4。创建节点的模式（有4种 瞬时（带序号） 持久）
    zkClient.create(&quot;/uuuu&quot;, &quot;test&quot;.getBytes(), Ids.OPEN_ACL_UNSAFE,
            CreateMode.EPHEMERAL_SEQUENTIAL);
}

// 判断zode是否存在 返回许多元数据stat
@Test
public void testExit() throws KeeperException, InterruptedException {
    Stat stat = zkClient.exists(&quot;/&quot;, false);
    System.out.println(stat == null ? &quot;not exists&quot; : &quot;exists&quot;);
}

// 获取zk中的子节点
@Test
public void testGet() throws KeeperException, InterruptedException {
    // true 表示给&quot;/&quot;节点加监听事件 用上一个监听
    List&lt;String&gt; list = zkClient.getChildren(&quot;/&quot;, true);
    for (String string : list) {
        System.out.println(string);
    }
    Thread.sleep(Long.MAX_VALUE);
}

// 获取zode的数据 
@Test
public void getData() throws KeeperException, InterruptedException{
    //1.znode的路径名 2.是否监听 3.获取版本 默认最新的
    byte[] data = zkClient.getData(&quot;/uuuu&quot;, false, null);
    System.out.println(new String(data));
}

//删除znode
@Test
public void deleteZnode() throws InterruptedException, KeeperException{
    //参数-1，表示删除所有版本
    zkClient.delete(&quot;/uuuu&quot;, -1);
}

//修改znode
@Test
public void setData() throws KeeperException, InterruptedException{
    zkClient.setData(&quot;/test&quot;, &quot;i miss tangwei&quot;.getBytes(), -1);
}
</code></pre><p>}<br><img src="http://zhoujian.lol/images/zk监听器.png" alt="image"></p>
<p>其实所谓的监听就是服务端和客户端的通信(底层socket协议或rpc协议 )，zkClient有个连接zkServer的线程，当调用某个方法操作znode的时候如:调用getClildren()时会想zk集群中传递客户端的ip、port、path（监听的路径），zk会保存这些信息，当监听的路径发生改变时zk集群会根据以上信息找到zkClient的listern线程，listern线程调用process方法触发事件反馈给客户端处理。</p>
<h2 id="应用场景"><a href="#应用场景" class="headerlink" title="应用场景"></a>应用场景</h2><p>主从协调(HA功能)、统一配置管理、统一名称服务(dubbo服务注册)、服务节点动态上下线、分布式共享锁</p>
<h3 id="分布式应用服务器上下线动态感知程序开发"><a href="#分布式应用服务器上下线动态感知程序开发" class="headerlink" title="分布式应用服务器上下线动态感知程序开发"></a>分布式应用服务器上下线动态感知程序开发</h3><p>需求：客户端实时洞察到服务器的变化(宕机、添加)<br>解决思路：首先，服务器启动时就要向zk中注册Ephemeral node 信息(包括服务器地址，节点名，序列号……),然后，客户端启动时就要去getChildren获取当前在线服务器列表，并注册监听。当服务器某个节点挂掉之后临时znode会被删除，zk就会通知客户端的监听线程，客户端监听到上下znode变化事件就会调用process方法，在方法中重新获取在线服务器列表在监听。</p>
<h3 id="分布式共享锁程序开发"><a href="#分布式共享锁程序开发" class="headerlink" title="分布式共享锁程序开发"></a>分布式共享锁程序开发</h3><p>在集中式系统中有冲突、线程问题用sychronized锁机制，在分布式中通常会想到第三方去解决 如zookeeper。<br>需求：很多客户端都去请求共享资源(网络接口)，可能会有冲突情况，怎么解决<br>解决思路：客户端到zk中去注册锁信息(uuid或其它序号)，每次客户端请求共享资源时都会通过zk去请求，zk会根据各个客户端的锁信息如序号取最小值(或最大值)，获取资源成功后删除锁信息，这是触发监听事件通知其他客户端在获取资源，删除的客户端重新生成序号在排队等待。</p>
]]></content>
    
    <summary type="html">
    
      原创
    
    </summary>
    
      <category term="技术" scheme="http://zhoujian.lol/categories/%E6%8A%80%E6%9C%AF/"/>
    
      <category term="大数据" scheme="http://zhoujian.lol/categories/%E6%8A%80%E6%9C%AF/%E5%A4%A7%E6%95%B0%E6%8D%AE/"/>
    
    
      <category term="zookeeper" scheme="http://zhoujian.lol/tags/zookeeper/"/>
    
  </entry>
  
  <entry>
    <title>JVM浅谈</title>
    <link href="http://zhoujian.lol/2016/12/19/JVM%E6%B5%85%E8%B0%88/"/>
    <id>http://zhoujian.lol/2016/12/19/JVM浅谈/</id>
    <published>2016-12-19T02:30:19.000Z</published>
    <updated>2016-12-22T15:41:00.712Z</updated>
    
    <summary type="html">
    
      原创
    
    </summary>
    
      <category term="技术" scheme="http://zhoujian.lol/categories/%E6%8A%80%E6%9C%AF/"/>
    
      <category term="java" scheme="http://zhoujian.lol/categories/%E6%8A%80%E6%9C%AF/java/"/>
    
    
  </entry>
  
  <entry>
    <title>常见易混淆命令</title>
    <link href="http://zhoujian.lol/2016/12/19/%E5%B8%B8%E8%A7%81%E6%98%93%E6%B7%B7%E6%B7%86%E5%91%BD%E4%BB%A4(%E6%8C%81%E7%BB%AD%E6%9B%B4%E6%96%B0%E4%B8%AD......)/"/>
    <id>http://zhoujian.lol/2016/12/19/常见易混淆命令(持续更新中......)/</id>
    <published>2016-12-19T02:15:23.000Z</published>
    <updated>2016-12-22T15:36:21.400Z</updated>
    
    <summary type="html">
    
      原创
    
    </summary>
    
      <category term="技术" scheme="http://zhoujian.lol/categories/%E6%8A%80%E6%9C%AF/"/>
    
      <category term="Linux" scheme="http://zhoujian.lol/categories/%E6%8A%80%E6%9C%AF/Linux/"/>
    
    
      <category term="linux" scheme="http://zhoujian.lol/tags/linux/"/>
    
  </entry>
  
  <entry>
    <title>SSH协议</title>
    <link href="http://zhoujian.lol/2016/12/17/SSH%E5%8D%8F%E8%AE%AE/"/>
    <id>http://zhoujian.lol/2016/12/17/SSH协议/</id>
    <published>2016-12-17T15:42:43.000Z</published>
    <updated>2016-12-22T15:40:49.459Z</updated>
    
    <content type="html"><![CDATA[<h2 id="浅述"><a href="#浅述" class="headerlink" title="浅述"></a>浅述</h2><p>简单点说，ssh是网络安全外壳协议。用于计算机之间的加密协议，即使信息被截获密码也不会泄露（为什么自己去百度，这里不做重点）</p>
<p>在大数据领域中ssh用于安全登录，被称为免密码登录。</p>
<h2 id="通常用法"><a href="#通常用法" class="headerlink" title="通常用法"></a>通常用法</h2><p>ssh-keygen [-t][-p] rsa/dsa(默认rsa算法可以去掉参数t)<br>此命令会在.ssh文件夹下生产id_rsa id_rsa.pub或id_dsa id_dsa.pub,即私钥 公钥</p>
<h2 id="实现免密码登录"><a href="#实现免密码登录" class="headerlink" title="实现免密码登录"></a>实现免密码登录</h2><p>1.通过scp 公钥 用户名@主机名:/.ssh 将公钥拷贝到另一个主机中<br>2.在另一台主机中 通过cat 公钥 &gt; /.ssh/authorized_keys 进行授权操作。<br>上面2步可以简化为一步<br>ssh-copy-id 实现拷贝公钥的同时进行了授权操作，建议优先使用。</p>
<h2 id="聊聊ssh验证机制"><a href="#聊聊ssh验证机制" class="headerlink" title="聊聊ssh验证机制"></a>聊聊ssh验证机制</h2><p>ssh有2种身份验证机制<br>1.用户名+密码（用xshell或secureCRT连接使用ssh支持这种机制）<br>2.密钥验证<br>目标主机会跟根据授权文件中是否有请求方的公钥信息，如果有则根据对方公钥生成加密信息，再将加密信息发给请求连接方，请求连接方根据自己的私钥去解密生成解密文件在发送给目标主机，目标主机判断正确则允许连接。</p>
<h2 id="常见的连接错误"><a href="#常见的连接错误" class="headerlink" title="常见的连接错误"></a>常见的连接错误</h2><p>ssh_exchange_identification: Connection closed by remote host<br>方法一.把SSH连接数改大<br>方法二.检查/etc/hosts.deny和/etc/hosts.allow里面是否屏蔽了某些帐户</p>
]]></content>
    
    <summary type="html">
    
      原创
    
    </summary>
    
      <category term="技术" scheme="http://zhoujian.lol/categories/%E6%8A%80%E6%9C%AF/"/>
    
      <category term="大数据" scheme="http://zhoujian.lol/categories/%E6%8A%80%E6%9C%AF/%E5%A4%A7%E6%95%B0%E6%8D%AE/"/>
    
    
      <category term="ssh" scheme="http://zhoujian.lol/tags/ssh/"/>
    
  </entry>
  
  <entry>
    <title>企业级服务器</title>
    <link href="http://zhoujian.lol/2016/12/16/%E4%BC%81%E4%B8%9A%E7%BA%A7%E6%9C%8D%E5%8A%A1%E5%99%A8/"/>
    <id>http://zhoujian.lol/2016/12/16/企业级服务器/</id>
    <published>2016-12-16T15:34:43.000Z</published>
    <updated>2016-12-23T15:31:29.978Z</updated>
    
    <content type="html"><![CDATA[<p>LZ接触过hp系列的服务器，这里只对hp-DL580、hp-DL388、hp-DL380、hp-P4500等型号浅谈.</p>
<h2 id="名词解释"><a href="#名词解释" class="headerlink" title="名词解释"></a>名词解释</h2><p>企业级：属于高档服务器,具有高内存带宽，大容量热插拔硬盘和热插拔电源，具有超强的数据处理能力<br>机架式：机架式服务器的外形看来不像计算机，而像交换机.<br>结构(几U)：U是一种表示服务器外部尺寸的单位,是unit的缩略语,1U=4.445cm</p>
<p>注意：CPU数量绝对不是CPU核心 1个CPU叫单处理器，2个CPU叫双处理器。1个CPU可以是双核货单核。</p>
<h2 id="HP-DL380（此款已停产）"><a href="#HP-DL380（此款已停产）" class="headerlink" title="HP-DL380（此款已停产）"></a>HP-DL380（此款已停产）</h2><p>此款服务器，售价在2-3W之间，内存标配为12G,可扩展到192G ,硬盘标配为584GB</p>
<h2 id="hp-DL388"><a href="#hp-DL388" class="headerlink" title="hp-DL388"></a>hp-DL388</h2><p>此款服务器，售价在2W左右，内存标配为32G,可扩展到768G ,硬盘标配为584GB</p>
<h2 id="HP-DL580"><a href="#HP-DL580" class="headerlink" title="HP-DL580"></a>HP-DL580</h2><p>此款服务器，售价在5.5W左右，内存标配为32G 可以最大扩展到2T内存以上，硬盘标配为4T。</p>
<h2 id="HP-P4500"><a href="#HP-P4500" class="headerlink" title="HP-P4500"></a>HP-P4500</h2><p>此款系列服务器绝对高配了，售价在10W-20W之间，最大存储可达到24T</p>
<h2 id="附带真实工作环境中的机房拓扑图"><a href="#附带真实工作环境中的机房拓扑图" class="headerlink" title="附带真实工作环境中的机房拓扑图"></a>附带真实工作环境中的机房拓扑图</h2><p><img src="http://zhoujian.lol/images/拓扑图1.png" alt="image"><br><img src="http://zhoujian.lol/images/拓扑图2.png" alt="image"></p>
]]></content>
    
    <summary type="html">
    
      原创
    
    </summary>
    
      <category term="技术" scheme="http://zhoujian.lol/categories/%E6%8A%80%E6%9C%AF/"/>
    
      <category term="大数据" scheme="http://zhoujian.lol/categories/%E6%8A%80%E6%9C%AF/%E5%A4%A7%E6%95%B0%E6%8D%AE/"/>
    
    
      <category term="服务器" scheme="http://zhoujian.lol/tags/%E6%9C%8D%E5%8A%A1%E5%99%A8/"/>
    
  </entry>
  
  <entry>
    <title>谈谈程序员的几个阶段</title>
    <link href="http://zhoujian.lol/2016/12/15/%E8%B0%88%E8%B0%88%E7%A8%8B%E5%BA%8F%E5%91%98%E7%9A%84%E5%87%A0%E4%B8%AA%E9%98%B6%E6%AE%B5/"/>
    <id>http://zhoujian.lol/2016/12/15/谈谈程序员的几个阶段/</id>
    <published>2016-12-15T06:26:22.000Z</published>
    <updated>2016-12-23T15:32:36.730Z</updated>
    
    <content type="html"><![CDATA[<h2 id="关于程序员的几个阶段"><a href="#关于程序员的几个阶段" class="headerlink" title="关于程序员的几个阶段"></a>关于程序员的几个阶段</h2><p>每个程序员、或者说每个工作者都应该有自己的职业规划，如果看到这里的朋友没有自己的职业规划，希望你可以思考一下自己的将来。<br>LZ常常思考自己的未来,鉴于文笔拙劣，阅历浅薄。以下内容摘录于互联网，LZ拿出来，自勉、共勉之。</p>
<h2 id="第一阶段：三年"><a href="#第一阶段：三年" class="headerlink" title="第一阶段：三年"></a>第一阶段：三年</h2><p>我认为三年对于程序员来说是第一个门槛，这个阶段将会淘汰掉一批不适合写代码的人。这一阶段，我们走出校园，迈入社会，成为一名程序员，正式从书本上的内容迈向真正的企业级开发。我们知道如何团队协作、如何使用项目管理工具、项目版本如何控制、我们写的代码如何测试如何在线上运行等等，积累了一定的开发经验，也对代码有了一定深入的认识，是一个比较纯粹的Coder的阶段</p>
<h2 id="第二阶段：五年"><a href="#第二阶段：五年" class="headerlink" title="第二阶段：五年"></a>第二阶段：五年</h2><p>五年又是区分程序员的第二个门槛。有些人在三年里，除了完成工作，在空余时间基本不会研究别的东西，这些人永远就是个Coder，年纪大一些势必被更年轻的人给顶替；有些人在三年里，除了写代码之外，还热衷于研究各种技术实现细节、看了N多好书、写一些博客、在Github上分享技术，这些人在五年后必然具备在技术上独当一面的能力并且清楚自己未来的发展方向，从一个Coder逐步走向系统分析师或是架构师，成为项目组中不可或缺的人物</p>
<h2 id="第三阶段：十年"><a href="#第三阶段：十年" class="headerlink" title="第三阶段：十年"></a>第三阶段：十年</h2><p>十年又是另一个门槛了，转行或是继续做一名程序员就在这个节点上。如果在前几年就抱定不转行的思路并且为之努力的话，那么在十年的这个节点上，有些人必然成长为一名对行业有着深入认识、对技术有着深入认识、能从零开始对一个产品进行分析的程序员，这样的人在公司基本担任的都是CTO、技术专家、首席架构师等最关键的职位，这对于自己绝对是一件荣耀的事，当然老板在经济上也绝不会亏待你</p>
<h2 id="工作浅谈"><a href="#工作浅谈" class="headerlink" title="工作浅谈"></a>工作浅谈</h2><p>我认为，随着你工作年限的增长、对生活对生命认识的深入，应当不断思考三个问题：<br>1、我到底适不适合当一名程序员？<br>2、我到底应不应该一辈子以程序员为职业？<br>3、我对编程到底持有的是一种什么样的态度，是够用就好呢还是不断研究？<br>最终，明确自己的职业规划，对自己的规划负责并为之努力。</p>
<p>关于项目经验<br>LZ在网上经常看到一些别的朋友有提出项目经验的问题，依照LZ面试的感觉来说，面试主要看几点：项目经验+基本技术+个人潜力（也就是值不值得培养）。</p>
<p>关于项目经验，我认为并发编程网的创始人方腾飞老师讲的一段话非常好：<br>介绍产品时面试官会考察应聘者的沟通能力和思考能力，我们大部分情况都是做产品的一个功能或一个模块，但是即使是这样，自己有没有把整个系统架构或产品搞清楚，并能介绍清楚，为什么做这个系统？这个系统的价值是什么？这个系统有哪些功能？优缺点有哪些？如果让你重新设计这个系统你会如何设计？</p>
<p>我觉得这就已经足以概括了。也许你仅仅工作一年，也许你做的是项目中微不足道的模块，当然这些一定是你的劣势且无法改变，但是如何弥补这个劣势，从方老师的话中我总结几点：<br>1、明确你的项目到底是做什么的，有哪些功能<br>2、明确你的项目的整体架构，在面试的时候能够清楚地画给面试官看并且清楚地指出从哪里调用到哪里、使用什么方式调用<br>3、明确你的模块在整个项目中所处的位置及作用<br>4、明确你的模块用到了哪些技术，更好一些的可以再了解一下整个项目用到了哪些技术</p>
<p>在你无法改变自己的工作年限、自己的不那么有说服力的项目经验的情况下（这一定是扣分项），可以通过这种方式来一定程度上地弥补并且增进面试官对你的好感度。</p>
<h2 id="关于奔三程序员之后转行的反驳。"><a href="#关于奔三程序员之后转行的反驳。" class="headerlink" title="关于奔三程序员之后转行的反驳。"></a>关于奔三程序员之后转行的反驳。</h2><p>讲到了奔三程序员的困惑，大致说的是三十岁之后程序员要转行之类的云云.<br><img src="http://zhoujian.lol/images/640.png" alt="image"></p>
]]></content>
    
    <summary type="html">
    
      文字摘录于互联网
    
    </summary>
    
      <category term="乱谈" scheme="http://zhoujian.lol/categories/%E4%B9%B1%E8%B0%88/"/>
    
    
      <category term="程序猿" scheme="http://zhoujian.lol/tags/%E7%A8%8B%E5%BA%8F%E7%8C%BF/"/>
    
      <category term="码农" scheme="http://zhoujian.lol/tags/%E7%A0%81%E5%86%9C/"/>
    
  </entry>
  
</feed>
